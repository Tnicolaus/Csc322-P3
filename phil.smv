--
-- CSC 322 Project 3
--
-- Name: Tristan Nicolaus
-- Vnum: V00913393
-- Name: Chloe Blankers
-- Vnum: V00917921
-- Name: Zachary Nasu
-- Vnum: V00911790
--
MODULE main
  
  VAR
    chopsticks : array 0..4 of {nobody,0,1,2,3,4}; -- who holds the chopstick.
    ticket : {0,1,2,3,4}; --who's turn it is to grab chopsticks
    --
    -- Philosopher i has chopstick i on left and chopstick
    -- (i + 1) mod 5 on right
    --
    p0 : process philosopher(0,chopsticks[0],chopsticks[1],ticket);
    p1 : process philosopher(1,chopsticks[1],chopsticks[2],ticket);
    p2 : process philosopher(2,chopsticks[2],chopsticks[3],ticket);
    p3 : process philosopher(3,chopsticks[3],chopsticks[4],ticket);
    p4 : process philosopher(4,chopsticks[4],chopsticks[0],ticket);
  
  ASSIGN
    --
    -- Initially, all chopsticks are free
    --
    init(chopsticks[0]) := nobody;
    init(chopsticks[1]) := nobody;
    init(chopsticks[2]) := nobody;
    init(chopsticks[3]) := nobody;
    init(chopsticks[4]) := nobody;
    --
    --Initially chopstick starts at p1 and moves to p2 then p3..
    --
    init(ticket) := 0;
    


MODULE philosopher(i,left,right,turn)
  
  VAR
    state : {thinking, hungry, eating, done};
    
  DEFINE
    --
    -- These are just abbreviations, not state variables
    --
    gotleft := (left=i);
    gotright := (right=i);
    leftfree := (left=nobody);
    rightfree := (right=nobody);
    myturn := (turn=i);
      
  ASSIGN
    init(state) := thinking;

    next(left)  := case
      (state = done) : nobody; -- drop chopstick
      --
      -- if hungry and left chopstick is free and its myturn, take it
      --
      (state=hungry) & leftfree & myturn : i;
      TRUE : left;
    esac;

    next(right) := case
      (state = done) : nobody; -- drop chopstick
      --
      -- if hungry and have left chopstick and right is free and myturn, take it
      --
      (state=hungry) & gotleft & rightfree & myturn : i; 
      TRUE : right;
    esac;

    next(state) := case
      (state=thinking) : {thinking, hungry};
      (state=hungry) & gotleft & gotright : eating;
      (state=hungry) : hungry; -- don't have chopsticks
      (state=eating) : {eating, done};
      (state=done) : thinking;
      TRUE : state;
    esac;

    next(turn) := case
      --set turn to next if thinking
      (state=thinking) & myturn & (i=0): 1;
      (state=thinking) & myturn & (i=1): 2;
      (state=thinking) & myturn & (i=2): 3;
      (state=thinking) & myturn & (i=3): 4;
      (state=thinking) & myturn & (i=4): 0;
      --set turn to next if done and not holding chopsticks
      (state=done) & myturn & leftfree & rightfree & (i=0) : 1 ;
      (state=done) & myturn & leftfree & rightfree & (i=1) : 2 ;
      (state=done) & myturn & leftfree & rightfree & (i=2) : 3 ;
      (state=done) & myturn & leftfree & rightfree & (i=3) : 4 ;
      (state=done) & myturn & leftfree & rightfree & (i=4) : 0 ;
      TRUE : turn;
    esac;

  -- add fairness constraints here
  FAIRNESS !(state = eating)   --not always eating
  FAIRNESS running
  -- add specifications here 

  -- safety:
  --whenever eating holds both chopsticks
  SPEC AG((state=eating) -> (gotleft & gotright & myturn))
  -- liveness:
  --whenever hungry eventually eats
  SPEC AG((state=hungry) -> AF(state=eating))
