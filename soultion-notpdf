---
title: "Solution.pdf"
author: "Tristan Nicolaus, Chloe Blankers, Zachary Nasu"
vnumbers: V00193393, V00917921, V00911790
date: "2023-04-08"
---


###phil.smv:

This simple polling solution, uses a variable ticket which takes on values in {0,1,2,3,4} to indicate whose turn it is to pick up chopsticks and eat. Ticket starts at
philosopher zero and is passed around in ascending order, then back to philosopher zero after the 4th one. In the next() function for left and right the philosopher 
checks if the chopstick is free and also if it is his/her turn to pick up the chopstick before actually picking up the chopstick. The ticket was passed into the 
philosopher() function as "turn". The next() function for turn simply increases ticket by 1(mod 5) if the philosopher is either thinking or done eating and has put
down the chopsticks (If we passed the ticket before they put down the chopsticks we would have issues). 

The FAIRNESS !(state=eating) constraint say that a philosopher cannot eat forever, and the FAIRNESS running constraint enforces that each process must be executed 
infinitely often. The safety constraint SPEC AG((state=eating)->(gotleft & gotright & myturn)) says that on all paths globally if a philosopher is eating then he/she
must be holding both chopsticks, and it must be their turn to eat. This ensures safety; that two processses that share resources cannot be in their critical section at
the same time, by making sure that two philopophers are not holding the same fork at once. The liveness spec says that along all paths globally if a philosopher is
hungry then along all paths eventually he /she will eat. Ensuring that no process is starved and unable to reach its critical section forever.


###phil.extended.smv

To add concurrency to the solution, we built upon the previous implementation but included 2 tickets instead of one. 
Since there are 5 chopsticks, it is possible for two philosophers to be eating simultaneously if they are not sitting beside each other. 
In this file, the first ticket is initialized to 0 and the second to 2, since philosophers 0 and 2 sit across from each other. 
Both tickets are passed to the Philosopher module along with the chopsticks and philosophers id value. 
In the Philosopher module tickets are referred to as turn1 (ticket1) and turn2 (ticket2). 
Here, the myturn variable is set to true if either turn1 or turn2 is equal to the philosopher's id (i). 
The next(left), next(right) and next(state) remain the same but the next(turn) function is now replaced by next(turn1) and next(turn2) 
since we do not know which turn variable the current philosopher is using and we need to update one of those values. 
For next(turn1), we set turn1 to the next philosopher if the current philosopher's state is thinking and turn1 = i. 
We also set turn1 to the next philosopher if he current state is done, both chopsticks are free and turn1 = i. 
The same process is followed for next(turn2). 

All the previous specifications remain unchanged and still hold but new specifications were added in the main module. The first specification is:
   SPEC
   EG (
     (EF ((p0.state = eating) & (p2.state = eating))) &
     (EF ((p1.state = eating) & (p3.state = eating))) &
     (EF ((p2.state = eating) & (p4.state = eating))) &
     (EF ((p3.state = eating) & (p0.state = eating))) &
     (EF ((p4.state = eating) & (p1.state = eating)))
   )
Which translates to “It is true that eventually p0 & p2 are both in the eating state, and p1 & p3 are both in the eating state, 
and p2 & p4 are both in the eating state, p3 & p0 are both in the eating state, and p4 and p1 are both in the eating state." 
This means that it is true that philosophers who sit across from each other will eat concurrently. The next specification is:
   SPEC
   AG (
     (AG !((p0.state = eating) & (p1.state = eating))) &
     (AG !((p1.state = eating) & (p2.state = eating))) &
     (AG !((p2.state = eating) & (p3.state = eating))) &
     (AG !((p3.state = eating) & (p4.state = eating))) &
     (AG !((p4.state = eating) & (p0.state = eating)))
   )
Which translates to “For all paths of the system, it should always hold that no two adjacent philosophers can be in the "eating" state simultaneously.”
Essentially, philosopher’s cannot both be eating if they sit beside each other since there are not enough chopsticks for both. 


